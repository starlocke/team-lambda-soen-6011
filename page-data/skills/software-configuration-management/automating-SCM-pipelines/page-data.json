{"componentChunkName":"component---src-templates-skill-page-template-js","path":"/skills/software-configuration-management/automating-SCM-pipelines","result":{"data":{"markdownRemark":{"html":"<p>Automating Software Configuration Management (SCM) Pipelines.</p>\n<p>The art of designing, developing, maintaining and managing pipelines for:</p>\n<ul>\n<li>Software Builds</li>\n<li>Software Tests</li>\n<li>and Software Artifacts (also known as \"Deliverables\")</li>\n</ul>\n<h2>Classification of Skill</h2>\n<ul>\n<li>Technical Skills: 10</li>\n<li>Human Relation Skills: 8</li>\n<li>Conceptual Skills: 10</li>\n</ul>\n<p><img src=\"https://image-charts.com/chart?chco=EA469E66%7C03A9F466%7CFFC00C66&#x26;chd=a%3A10%2C8%2C10&#x26;chdl=Technical%20Skills%7CHuman%20Relations%20Skills%7CConceptual%20Skills&#x26;chdls=000000%2C14&#x26;chs=640x480&#x26;cht=pa&#x26;chts=000000%2C32&#x26;chtt=Automation%20of%20SCM%20Pipelines&#x26;chxr=0%2C0%2C100&#x26;chxt=y\" alt=\"A polar area chart showing the classification mixture for the skill of Automation of Software Configuration Management Pipelines\"></p>\n<h2>Prerequisites for Skill</h2>\n<ul>\n<li>In-depth knowledge of at least one SCM automation system</li>\n<li>In-depth knowledge of each operating system involved</li>\n<li>...</li>\n</ul>\n<h2>Related Software Engineering Area(s)</h2>\n<p>...</p>\n<h2>Rationale for Skill</h2>\n<p>As software products and their development teams become increasingly complex,\nthe importance of automating aspects of software configuration management also\nincreases. That is because teams are often formed with members having somewhat\ndisjoint skills and specialities and it is rare to have members who are experts\nin literally all aspects of sufficiently complex projects. Every member of such\na team may have a very limited idea of what the whole project entails, but they\neach might also have extremely detailed understanding of aspects of the project\nthat they are individually specializing in. By committing all of the concerns\nfrom each team member into automation systems, the whole team benefits and is\nmore efficient overall.</p>\n<p>It is possible to view the whole of automating SCM pipelines as working to solve\nissues along 3 orthogonal dimensions: versions, platforms, scale. In versioning,\nthe concern is with changes over time. In platforming, the concern is with being\nable to make use of the same software on computer systems having differing\nfoundations (for example: ARM vs x86 architectures; macOS vs Windows). In scaling,\nthe concern is with operating the same software concurrently over multiple computer systems (for example: 1 ARM-based server vs 1000 ARM-based servers).</p>\n<p>This article will explore these concerns with a focus on relatively mature and/or\nsufficiently complex software projects.</p>\n<h3>SCM of Versions</h3>\n<p>When SCM is concerned over the handling of multiple versions of a software in a\nmature and/or complex project, there must be processes in place to enable a\nversion identifier to the produced software. These can be entirely manual to\nentirely automated.</p>\n<p>In automated systems, the version identifiers can be: serial increments,\nmathematical hashes, or, maybe even random based on some novel heuristics.</p>\n<p>Whatever the case may be, the software engineering responsible for implementing\nthe automation system would have provide a sufficient software service that will\nprovision those version per the project's requirements.</p>\n<p>The possibility of a hybrid between manual and automated version identifiers is\nentirely plausible, too.</p>\n<h3>SCM of Platforms</h3>\n<p>For the concerns of SCM, a platform is defined as a particular hardware\nand software combination that supports a software project. It is entirely possible\nthat there is overlap between \"the platform\" and \"the product\".</p>\n<p>Example</p>\n<blockquote>\n<p>We are developing a mobile game for the iPhone X or newer, leverage those models'\n3D facial-recognition cameras.</p>\n</blockquote>\n<p>Example</p>\n<blockquote>\n<p>We are developing a point-of-sale, credit-card reader application for iPhones\nand iPads newer than 2015; we can sell the app, the card-reader and the\nphones/tablets together as bundles to business looking for turn-key solutions.\nFor security reasons, they must be operating on iOS version 9 or newer.</p>\n</blockquote>\n<p>Example</p>\n<blockquote>\n<p>We are developing a cross-platform ebook application that can run on\nmultiple different computers (ARM, x86, etc) and operating systems (macOS,\nWindows, Linux, Android, iOS, etc).</p>\n</blockquote>\n<p>Traditionally, it would be incumbent on dedicated IT personnel to administer\nthe physical and logical platforms on which software would run. In many situations,\nthat is still in fact the case due to constraints about accessing modern solutions\nand resources. In many of those situations where software projects are produced\nwith limited resources, those charged with handling the SCM for the project would\nbecome the de-facto, informal leadership and may fill in the gap left by IT. IT\ndepartments are frequently found to be uninterested in project-specific issues.</p>\n<p>Increasingly, SCM experts embedded in software project teams would be called upon\nto provision platform-as-a-service to the primary software development members of\nthe projects. On the classical end of the spectrum, a set of hands-on computing\nresources would need to be managed en-mass in automated fashion. On the modern end\nof the spectrum, it could be a set of in-the-cloud computing resources. Naturally,\nhybrid solutions are viable, too.</p>\n<p>At the bare minimum, one specific platform needs to be consistently targetted\nthroughout the software development lifecycle (example: the Mars Rover Curiosity).\nThere also exist situations where a vast array of different specific platforms\nmust be targeted (example: a cross-platform, mass-market application).</p>\n<p>When automating SCM, there is a need to become familar with handling all sorts\nof different hardware and software configurations in a disciplined, planned,\nrigorous manner such that building, running and testing of the software product\nwould be reliable and reproducible over the lifetime of the project. The goal\nof automating the software configuration management of platforms is to alieviate\nthe operation of intensely tedious mappings and remappings of platform-specific\nnuances, leaving developers to focus primarily on their software development\ninstead of platform-specific issues.</p>\n<h3>SCM of Scale</h3>\n<p>When the nature of a sofware project is such that the development team must also\noperate the software, then, the software configuration management of scale becomes\na particularly interesting affair. This is typical of massive, cloud-based\nservices like social media platforms.</p>\n<h2>Roles for Skill</h2>\n<p>Some of the primary roles for the skill of automating software configuration\nmanagement pipelines include:</p>\n<ul>\n<li>DevSecOps/CICD Developer/Engineer</li>\n<li>Software Release Developer/Engineer</li>\n</ul>\n<p>Generalists may also be tasked with various components of automating SCM to\nsome degree:</p>\n<ul>\n<li>Software Developer/Engineer (general-purpose)</li>\n</ul>\n<p>Some roles are less likely to be responsible for the automation of a project's\nsoftware configuration management pipelines, but there must certainly be cases\nwhere it's a core function of their job. These include roles like:</p>\n<ul>\n<li>Software Architect</li>\n<li>System Administrator</li>\n</ul>\n<h2>Work Related to Skill (Related Activities and Artifacts)</h2>\n<p>In the course of executing the automation of software configuration management\npipelines, a large variety of supporting work and skills tend to become necessary.\nHere is an exposition of some typically experienced work for pracitioners of\nSCM automation, with brief additional insights.</p>\n<ul>\n<li>\n<p>Software Architecture</p>\n<ul>\n<li>The SCM Automator need to be assemble together various systems into a smooth,\nreliable operation. Doing so requires the knowledge, skills and experience to\nperform a complex degree of software architecture on a daily basis.</li>\n</ul>\n</li>\n<li>\n<p>System Administration</p>\n<ul>\n<li>More than merely having knowledge of how to assemble systems together, it is\noften crucial that the SCM automator has sufficient familiarity with administering\nsystems in the same fashion as a typical IT system administrator.</li>\n</ul>\n</li>\n<li>\n<p>Evaluation</p>\n<ul>\n<li>Options between all kinds of things must constantly be evaluated.</li>\n</ul>\n</li>\n<li>\n<p>Purchasing</p>\n<ul>\n<li>Making recommendations for purchases tends to come into play when building up\nthe infrastuctures and resources for SCM automation. Sometimes, outright\nbeing responsible for the purchase execution occurs; typically in small-businesses.</li>\n</ul>\n</li>\n<li>\n<p>Estimation</p>\n<ul>\n<li>Having enough experience with all relevant processes, systems and technical\nmatters to regularly provide reliable estimates is crutial to many aspects of\nautomating an SCM for the other stakeholders.</li>\n</ul>\n</li>\n<li>\n<p>System Operation</p>\n<ul>\n<li>Similar in line with \"System Administraion\" skills, the nuance is subtle and\nnot of great importance.</li>\n</ul>\n</li>\n<li>\n<p>Testing</p>\n<ul>\n<li>An SCM automator must continuously test the results of their pipelines,\nlest something newly introduced by a team member (even himself or herself)\ncause their pipelines to start failing over too long a period.</li>\n</ul>\n</li>\n<li>\n<p>Developing</p>\n<ul>\n<li>It is best practice to produce \"infrastructure as code\", and so, those who\nimplement SCM automation would be very wise to commit everything they do\ninto code repositories of good reliability. The very nature of automating\nSCM involves writing a lot of scripts, tools, test, and whatever else is\nneeded to take the burden off team members.</li>\n</ul>\n</li>\n<li>\n<p>Debugging</p>\n<ul>\n<li>With software devleopment and testing comes debugging, of course.</li>\n</ul>\n</li>\n<li>\n<p>Technical Writing</p>\n<ul>\n<li>Documentation, documentation, documentation!</li>\n<li>The skill of being able to produce excellent documentation is of utmost\nimportance when passing on the legacy of the pipelines that have been created.</li>\n</ul>\n</li>\n<li>\n<p>Mentoring/Teaching</p>\n<ul>\n<li>Always having a succession plan is a good plan.</li>\n</ul>\n</li>\n<li>\n<p>Studying/Researching</p>\n<ul>\n<li>Always be curious.</li>\n</ul>\n</li>\n<li>\n<p>Advocating/Evangelizing</p>\n<ul>\n<li>The SCM automation developer/engineer should always be prepared to advocate\nfor novel solutions that would be of benefir to their projects.</li>\n</ul>\n</li>\n<li>\n<p>Negotiating</p>\n<ul>\n<li>A life skill. Don't leave home without it.</li>\n</ul>\n</li>\n<li>\n<p>Managing</p>\n<ul>\n<li>The whole point of automating SCM is to get a hold on managing software\nconfiguration.</li>\n</ul>\n</li>\n</ul>\n<h2>Real-World Example/Scenario of Skill (Text, Graphic, Audio, Video)</h2>\n<p>...</p>\n<h2>Role of Academia or Industry in Cultivating the Skill</h2>\n<p>...</p>\n<h2>Tools Supporting the Skill</h2>\n<p>There are many tools that contribute towards software configuration management,\nfrom low-tech things all the way to complex hardware-software systems and processes.</p>\n<p>In the low-tech realm, simple things such sticky notes would be legitimate tools\nfor keep track of certain goals, tasks, targets, or whatever else might be needed.\nThe humble sticky note is even commonly used in agile methodologies during\nvarious ceremonies and activities - notably in Kanban boards.</p>\n<p>For the sake of brevity, this article will go into more detail about just a few\nof the higher level tools that feature prominently at the heart of the automation\nof software configuration management.</p>\n<h3>Code Repositories</h3>\n<p>Code repositories are likely the most crucial component of any automated SCM\nsystem. They commonly provide the essential solution for keep track of history\nand multiple versions of a software project. In formal projects, it is of the\nutmost importance to be able to store the project's history, share that amongst\ncollaborators, and be able to work on any particular commit as a starting\npoint. The automated computer systems that operate in continuous integration\nand continuous deployment rely o <strong>(work in progress!!)</strong></p>\n<ul>\n<li>Git</li>\n<li>Subversion (SVN)</li>\n<li>Mercurial</li>\n<li>Perforce</li>\n</ul>\n<h3>Automation of SCM</h3>\n<ul>\n<li>Jenkins</li>\n</ul>\n<h2>Skill Self-Assessment (My Skill Score (1 – 10) and Reasons for Self-Assigned Score)</h2>\n<p>...</p>\n<h2>References</h2>\n<p>...</p>","frontmatter":{"title":"Automating Software Configuration Management (SCM) Pipelines","slug":"/skills/software-configuration-management/automating-SCM-pipelines","author":"Victor Yap"}}},"pageContext":{"slug":"/skills/software-configuration-management/automating-SCM-pipelines"}},"staticQueryHashes":["3649515864","63159454"]}