{"version":3,"sources":["webpack:///./src/components/categories/categories.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["CategoriesContainer","group","className","map","category","key","fieldValue","to","kebabCase","totalCount","pageQuery","IndexPage","data","edges","main","title","keywords","edge","style","node","id","frontmatter","slug","author","excerpt","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","concat","length","join","defaultProps"],"mappings":"svBAuCeA,G,UA9Ba,SAAC,GAAD,IACfC,EADe,EACxBA,MAASA,MADe,OAG1B,oCACE,6BACE,0CACA,wBAAIC,UAAU,qBACXD,EAAME,KAAI,SAAAC,GAAQ,OACjB,wBAAIC,IAAKD,EAASE,YAChB,kBAAC,IAAD,CAAMC,GAAE,eAAiBC,IAAUJ,EAASE,YAApC,KACLF,EAASE,WADZ,KAC0BF,EAASK,WADnC,cCuCCC,EAAS,aAwBPC,UAvEG,SAAC,GAAD,QAEdC,KAEGC,EAJW,EAGZC,KACCD,MAEDT,EANY,EAMZA,SANY,OAShB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEW,MAAM,OACNC,SAAU,CAAC,SAAD,yCAEZ,kBAAC,EAAD,CAAqBf,MAASG,IAC9B,6BAEIS,EAAMV,KACJ,SAACc,GACC,OACE,yBAAKC,MAAS,CAAC,OAAU,WAAYb,IAAKY,EAAKE,KAAKC,IAClD,kBAAC,IAAD,CACAF,MAAS,CAAC,SAAY,SACtBX,GAAE,GAAKU,EAAKE,KAAKE,YAAYC,MAC1BL,EAAKE,KAAKE,YAAYN,OAEzB,6BACE,kCACME,EAAKE,KAAKE,YAAYE,SAG9B,6BACGN,EAAKE,KAAKK,cAOzB,kBAAC,IAAD,S,4FCrCJ,SAASC,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMZ,EAAmB,EAAnBA,SAAUD,EAAS,EAATA,MACxCc,EADiD,OACjDA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFZ,MAAOA,EACPkB,cAAa,QAAUJ,EAAKE,aAAahB,MACzCa,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASpB,GAEX,CACEqB,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaR,QAE7B,CACEW,KAAK,gBACLC,QAASpB,GAEX,CACEmB,KAAK,sBACLC,QAASL,IAGVO,OACCrB,EAASsB,OAAS,EACd,CACEJ,KAAK,WACLC,QAASnB,EAASuB,KAAT,OAEX,IAELF,OAAOT,KAKhBH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNZ,SAAU,GACVU,YAAY,GACZX,MAAM,YAWOU","file":"component---src-pages-index-js-f008b5c3cb59bdc8b15a.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n// Utilities\nimport kebabCase from \"lodash/kebabCase\"\n// Components\nimport { Link } from \"gatsby\"\n// Styles\nimport './categories.css'\n\nconst CategoriesContainer = ({\n    group: { group }\n}) => (\n  <>\n    <div>\n      <h2>Categories</h2>\n      <ul className='category__wrapper'>\n        {group.map(category => (\n          <li key={category.fieldValue}>\n            <Link to={`/categories/${kebabCase(category.fieldValue)}/`}>\n              {category.fieldValue} ({category.totalCount})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </>\n)\n\nCategoriesContainer.propTypes = {\n  group: PropTypes.shape({\n    group: PropTypes.arrayOf(\n      PropTypes.shape({\n        fieldValue: PropTypes.string.isRequired,\n        totalCount: PropTypes.number.isRequired,\n      }).isRequired\n    ),\n  })\n}\n\nexport default CategoriesContainer","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from 'prop-types'\n\nimport Layout from \"../components/layout/layout\"\nimport SEO from \"../components/seo\"\nimport { Footer } from \"../components/footer\"\nimport CategoriesContainer from \"../components/categories/categories\"\n\nconst IndexPage = (\n  {\n    data: { \n      main: {\n       edges\n      },\n      category\n    }\n  }) => (\n  <Layout>\n    <SEO\n      title=\"Home\"\n      keywords={[`gatsby`, `application`, `react`, `accessibility`]}\n    />\n    <CategoriesContainer group = {category} />\n    <div>\n      {\n        edges.map(\n          (edge) => {\n            return(\n              <div style = {{'margin': '2.5em 0'}} key={edge.node.id}>\n                <Link\n                style = {{'fontSize': '1.2em' }}\n                to={`${edge.node.frontmatter.slug}`}>\n                  {edge.node.frontmatter.title}\n                </Link>\n                <div>\n                  <em>\n                    by {edge.node.frontmatter.author}\n                  </em>\n                </div>\n                <div>\n                  {edge.node.excerpt}\n                </div>\n              </div>\n            )\n        })\n      }\n    </div>\n    <Footer />\n  </Layout>\n)\n\nIndexPage.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport const pageQuery = graphql`\n  query {\n    main: allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___title] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            slug\n            title\n            author\n          }\n        }\n      }\n    }\n    category: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n  title: `SESTOPIA`\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}